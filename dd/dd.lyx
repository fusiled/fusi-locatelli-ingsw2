#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Quote
\noindent
\align center

\size giant
mytaxy
\end_layout

\begin_layout Quote
\noindent
\align center

\size larger
Document Design
\end_layout

\begin_layout Quote
\noindent
\align center
Matteo Maria Fusi, Matteo Locatelli
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Document version
\end_layout

\begin_layout Standard
Current version is 1.0 .
\end_layout

\begin_layout Subsection
Time Spent
\end_layout

\begin_layout Standard
5h
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Document Overview
\end_layout

\begin_layout Subsection
Document Purpose
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Subsection
Document Structure 
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview (L)
\end_layout

\begin_layout Standard
The architecture we based our system on is the client-server architecture
 with two tiers.
 One tier (the server tier) is composed by the server logic and the database,
 the other tier (the client tier) is composed by the client logic and the
 GUI that allows the user to intract with the system.
 The fact that both the server and the client tiers have an aplication logic
 means that the application is distributed; this, added to the fact that
 we decided to use a service oriented architure, allows our system to be
 scalable, so other services can be added without modifying the structure
 of the system.
 For example, if a future implementation of the system needs a different
 type of client, the new client can use the same services provided by the
 server without modifying the implementation of its logic.
 Furthermore, using a two tier architecture allows our system to be easy
 to maintain and to repair if some of its components break.
\end_layout

\begin_layout Subsection
High level components and their interaction (L)
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename uml/HIghComp.png
	width 7cm

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
High level architecture of the system
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
The three main high level components of the system are the front end, the
 service comunicator and the core of the system.
 The front end is used to allow customers and taxi drivers to interact with
 the system, so every customer can make requests and reservations and every
 taxi driver can accept or refuse a ride, appear available or not to the
 system etc.
 The core has the task to manage taxi queues and manage the comunication
 between customers and taxi drivers, by means of messages.
 Finally, the service comunicator has to ensure the comunication between
 the front end and the core, providing services to both the components.
\end_layout

\begin_layout Subsection
Component view (F)
\end_layout

\begin_layout Standard
Descrizione dettagliata dei componenti (client e server) con descrizione
 dei moduli al loro interno (gui, logica e servizi).
\end_layout

\begin_layout Subsubsection
Frontend
\end_layout

\begin_layout Standard
\noindent
The client is the component that take the input of the user and sends it
 to the system.
 It also has the duty of gathering available services from the Service List
 through the Service Requestor.
 Presenting informations sent by the system is also requested.
\end_layout

\begin_layout Itemize
GUI
\end_layout

\begin_layout Itemize
Client Logic
\end_layout

\begin_deeper
\begin_layout Itemize
GUI-Bridge
\end_layout

\begin_layout Itemize
Service Requestor
\end_layout

\end_deeper
\begin_layout Subsubsection
Core
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Itemize
Server Logic
\end_layout

\begin_deeper
\begin_layout Itemize
Core
\end_layout

\begin_layout Itemize
Service Provider
\end_layout

\end_deeper
\begin_layout Subsubsection
Service List
\end_layout

\begin_layout Standard
Service List is provided by the Server.
 It contains a list of all services that server can fulfill.
 Using this technique the client can know what services the system offers
 just making a simple lookup to the Service List.
 He can also gathers all the available services for the sake of using them.
\end_layout

\begin_layout Subsection
Deployment view (L)
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename uml/deployment/deployment.png
	width 13cm

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Deployment diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Considering that a client-server architecture has been chosen to implement
 the system, there are four elements in which the components have to be
 installed.
\end_layout

\begin_layout Subsubsection
Client (Customer)
\end_layout

\begin_layout Standard
This client contains the Frontend(Customer) component, so a user is able
 to submit a prestation (request or reservation) and to decide to accept
 or refuse a refusable message (this message is sent to the customer when
 the first taxi driver available is found outside the customer's zone).
 The customer's client is used on customer's smartphone or pcs, depending
 on his choise to use the app or webapp version of the service.
\end_layout

\begin_layout Subsubsection
Client (Taxi)
\end_layout

\begin_layout Standard
This client contains the Frontend(Taxi) component and is used by the taxi
 driver to access every functionality that is available to him, such as
 accepting or refusing a request and appear available to the system.
 This client will be installed on the taxi driver's smartphone and it's
 important to focus on the fact that this version of the client will be
 only available on taxi drivers' smartphone, in this way customers cannot
 accept the services reserved to drivers.
\end_layout

\begin_layout Standard
\noindent
The two clients exchange data, by means of interfaces, with both the service
 register (that allows them to retrieve the services they have access to)
 and the service provider (that provides the two client with the services
 they are able to access, previously specified by the service register).
\end_layout

\begin_layout Subsubsection
Server
\end_layout

\begin_layout Standard
The server contains two components: the core (responsible for the execution
 of the main functionalities of the system) and the service provider (that
 allows clients to access the services they need).
 The service provider communicates with the service register to access the
 services that the clients are enabled to use.
\end_layout

\begin_layout Subsubsection
Web page
\end_layout

\begin_layout Standard
The service register is located on a web page, so both the clients and the
 server can access it at any time and know which services can be used.
\end_layout

\begin_layout Subsection
Runtime view (F)
\end_layout

\begin_layout Standard
SEQUENCE DIAGRAM con pi√π dettagli rispetto a quelli nel rasd, soprattutto
 riguardo alle interazioni con le interfacce e i servizi.
\end_layout

\begin_layout Subsection
Component interfaces (F)
\end_layout

\begin_layout Standard
Spiegare come funzionano i servizi delle interfacce di client e server (in
 generale dato che vengono descritti nello specifico nei sequence diagrams).
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns (L)
\end_layout

\begin_layout Subsubsection
Architectural styles
\end_layout

\begin_layout Standard
To implement the mytaxi system, we decided to use two architectural styles
 that are the most suitable for this system: the client-server architecture
 and the service oriented architecture (SOA).
\end_layout

\begin_layout Itemize

\series bold
Client-server architecture: 
\series default
we decided to use this style to implement our system, customers and taxi
 drivers are the clients that are able to connect to a server that can execute
 the main functionalities of the service, such as the taxi queue menagement.
 This is the simplest and at the same time the safest choice because other
 styles may have not worked as well as the client-server architecture.
 For example, a peer to peer architecture wouldn't be right for our system,
 because the absence of peers in a certain moment would have compromised
 the functionalities of the mytaxi system.
 Another architecture we thought of was to install some stations in the
 city at which the clients could connect and then each station could guarantee
 the communication between clients and the server.
 We decided not to choose this architecture because a malfunction in a single
 station would have interrupt the functionalities of the system for some
 clients and the cost could have been to high.
\end_layout

\begin_layout Itemize

\series bold
Service oriented architecture: 
\series default
our system is based on a service oriented architecture, this means that
 clients use the services provided by a service provider.
 In this way, the two type of clients (customer and taxi driver) can access
 only the services they are able to use (for example, customers can access
 the service to make request and reservation, but not the one to accept
 a request that can only be used by taxi drivers).
 Furthermore, in this way the system is extendible, because if some new
 functionality must be added to the system, it's enough to just add the
 corrisponding service.
 The services provided by our system can also be sold to a third part system
 if it needs them.
\end_layout

\begin_layout Subsubsection
Design patterns
\end_layout

\begin_layout Itemize

\series bold
Core facade: 
\series default
the core of our system communicates with the service provider by means of
 a component, that is the Core facade.
 In this way the access made by the service provider to the core is much
 simpler and all the algorithms and functionalities of the core are hidden
 and unaccessible from the outside.
\end_layout

\begin_layout Subsection
Other design decisions
\end_layout

\begin_layout Standard
TUA MAMMA
\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
Algoritmo per la gestione delle code (vedi sequence diagram su rasd)
\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Section
References
\end_layout

\end_body
\end_document
