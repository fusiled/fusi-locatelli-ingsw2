#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Quote
\noindent
\align center

\size giant
mytaxy
\end_layout

\begin_layout Quote
\noindent
\align center

\size larger
Document Design
\end_layout

\begin_layout Quote
\noindent
\align center
Matteo Maria Fusi, Matteo Locatelli
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Document version
\end_layout

\begin_layout Standard
Current version is 1.0 .
\end_layout

\begin_layout Subsection
Time Spent
\end_layout

\begin_layout Standard
5h
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Document Overview
\end_layout

\begin_layout Subsection
Document Purpose
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Subsection
Document Structure 
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview (L)
\end_layout

\begin_layout Standard
The architecture we based our system on is the client-server architecture
 with two tiers.
 One tier (the server tier) is composed by the server logic and the database,
 the other tier (the client tier) is composed by the client logic and the
 GUI that allows the user to intract with the system.
 The fact that both the server and the client tiers have an aplication logic
 means that the application is distributed; this, added to the fact that
 we decided to use a service oriented architure, allows our system to be
 scalable, so other services can be added without modifying the structure
 of the system.
 For example, if a future implementation of the system needs a different
 type of client, the new client can use the same services provided by the
 server without modifying the implementation of its logic.
 Furthermore, using a two tier architecture allows our system to be easy
 to maintain and to repair if some of its components break.
\end_layout

\begin_layout Subsection
High level components and their interaction (L)
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/HighLevel.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsection
Component view (F)
\end_layout

\begin_layout Standard
Descrizione dettagliata dei componenti (client e server) con descrizione
 dei moduli al loro interno (gui, logica e servizi).
\end_layout

\begin_layout Subsubsection
Client
\end_layout

\begin_layout Standard
\noindent
The client is the component that take the input of the user and sends it
 to the system.
 It also has the duty of gathering available services from the Service List
 through the Service Requestor.
 Presenting informations sent by the system is also requested.
\end_layout

\begin_layout Itemize
GUI
\end_layout

\begin_layout Itemize
Client Logic
\end_layout

\begin_deeper
\begin_layout Itemize
GUI-Bridge
\end_layout

\begin_layout Itemize
Service Requestor
\end_layout

\end_deeper
\begin_layout Subsubsection
Server
\end_layout

\begin_layout Itemize
Database
\end_layout

\begin_layout Itemize
Server Logic
\end_layout

\begin_deeper
\begin_layout Itemize
Core
\end_layout

\begin_layout Itemize
Service Provider
\end_layout

\end_deeper
\begin_layout Subsubsection
Service List
\end_layout

\begin_layout Standard
Service List is provided by the Server.
 It contains a list of all services that server can fulfill.
 Using this technique the client can know what services the system offers
 just making a simple lookup to the Service List.
 He can also gathers all the available services for the sake of using them.
\end_layout

\begin_layout Subsection
Deployment view (L)
\end_layout

\begin_layout Standard
The main hardware components that will interact and will be part of our
 system are the server, the database, smartphones and personal computers.
\end_layout

\begin_layout Subsubsection
Server and database
\end_layout

\begin_layout Standard
The server is located in a safe structure where the risk of malfuctions
 and device breaks are at minimum.
 The functionality of the server has to be guaranteed for the most part
 of the year (except from short periods of time due to maintenance) and
 must be able to answer to every call coming from a customer errors.
 This means that before choosing a proper server for the system, an estimation
 of the average number of requests must be made, in order to build a server
 with the right capabilities to fulfill every request.
 Before choosing the right database to use, some facts must be take into
 account, such as the number of zones in which the city is devided and the
 number of taxi drivers working in the city.
 The database must be able to manage all these data without errors and must
 be capable of managing more data if new zones are created or if new taxi
 drivers decide to work in the city.
 
\end_layout

\begin_layout Subsubsection
Smartphones and personal computers
\end_layout

\begin_layout Standard
Smartphones will be used by both taxi drivers and customers to use the system.
 It's important to highlight the fact that the smartphones belonging to
 taxi drivers and customers use the same type of client, the only difference
 is the type of services that will be requested (the client on a customer's
 smartphone requests only services available for customers and the same
 is applied to clients on a taxi driver's smartphone).
 The same client is used on personal computers that customers use to make
 requests and reservations.
\end_layout

\begin_layout Subsection
Runtime view (F)
\end_layout

\begin_layout Standard
SEQUENCE DIAGRAM con pi√π dettagli rispetto a quelli nel rasd, soprattutto
 riguardo alle interazioni con le interfacce e i servizi.
\end_layout

\begin_layout Subsection
Component interfaces (F)
\end_layout

\begin_layout Standard
Spiegare come funzionano i servizi delle interfacce di client e server (in
 generale dato che vengono descritti nello specifico nei sequence diagrams).
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns (L)
\end_layout

\begin_layout Standard
Service Oriented Architecture.
 Service provider publishes type of services (request and reservation for
 clients).
 A future extension could be very simple
\end_layout

\begin_layout Subsection
Other design decisions
\end_layout

\begin_layout Standard
TUA MAMMA
\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
Algoritmo per la gestione delle code (vedi sequence diagram su rasd)
\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Section
References
\end_layout

\end_body
\end_document
