#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Quote
\noindent
\align center

\size giant
mytaxy
\end_layout

\begin_layout Quote
\noindent
\align center

\size larger
Document Design
\end_layout

\begin_layout Quote
\noindent
\align center
Matteo Maria Fusi, Matteo Locatelli
\end_layout

\begin_layout Quote
(quelli belli)
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Document version
\end_layout

\begin_layout Standard
Current version is 1.0 .
\end_layout

\begin_layout Subsection
Time Spent
\end_layout

\begin_layout Standard
15h
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Document Overview
\end_layout

\begin_layout Subsection
Document Purpose
\end_layout

\begin_layout Standard
The Design Document (DD) contains a functional description of the mytaxi
 system.
 This document explains every component that is inserted into the system,
 the architectural styles used and the design patterns that are implemented
 to guarantee the satisfaction of all the requirements The components will
 be described both at high level and more specifically, illustrating and
 explaining all the sub-components every component is made of.
 In this way the connection between components is illustrated and every
 person that will look at this document will have a clear idea about its
 architecture both hardware and software, wether he wants to have a detailed
 description of the system or a more general one.
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Standard
For the definitions, acronyms and abbreviations look to the 
\begin_inset Quotes eld
\end_inset

Glossary
\begin_inset Quotes erd
\end_inset

 section of the RASD document.
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Itemize
RASD document previously delivered.
\end_layout

\begin_layout Subsection
Document Structure 
\end_layout

\begin_layout Standard
Section 1 describes the main purpose and the structure of this Design Document.
 Section 2 contains the description of the components used in the system,
 firstly a high level view is illustrated, then every component is explored
 and each sub-component that composes it is described, highlighting the
 connections between components and sub-components.
 In the second section there are also the deployment view, that describes
 the physical deployment of the system i.e.
 which hardware the components are inserted into, the runtime view that
 illustrates the behaviour of the system when it's running and, finally,
 the architectural styles and the design patterns that are the most suitable
 to be used for the system.
 Section 3 contains the main algorithm that is implemented in the core of
 the system, that manages the taxi queue and the sending of messages to
 customers and taxi drivers.
 Section 4 shows how every functional requirement described in the RASD
 document is covered by the components of the system.
 Lastly, section 5 contains all the references to external documents needed
 to fully understand this paper.
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview
\end_layout

\begin_layout Standard
The architecture we based our system on is the client-server architecture
 with two tiers.
 One tier (the server tier) is composed by the server logic and the database,
 the other tier (the client tier) is composed by the client logic and the
 GUI that allows the user to intract with the system.
 The fact that both the server and the client tiers have an aplication logic
 means that the application is distributed; this, added to the fact that
 we decided to use a service oriented architure, allows our system to be
 scalable, so other services can be added without modifying the structure
 of the system.
 For example, if a future implementation of the system needs a different
 type of client, the new client can use the same services provided by the
 server without modifying the implementation of its logic.
 Furthermore, using a two tier architecture allows our system to be easy
 to maintain and to repair if some of its components break.
\end_layout

\begin_layout Subsection
High level components and their interaction
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/HIghComp.png
	width 10cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
The three main high level components of the system are the front end, the
 service comunicator and the core of the system.
 The front end is used to allow customers and taxi drivers to interact with
 the system, so every customer can make requests and reservations and every
 taxi driver can accept or refuse a ride, appear available or not to the
 system etc.
 The core has the task to manage taxi queues and manage the comunication
 between customers and taxi drivers, by means of messages.
 Finally, the service comunicator has to ensure the comunication between
 the front end and the core, providing services to both the components.
\end_layout

\begin_layout Subsection
Component view 
\end_layout

\begin_layout Subsubsection
Frontend
\end_layout

\begin_layout Standard
\noindent
The frontend must takes the input of users and present the several responses
 that the system generates for the user.
 Two different kinds of frontends are proposed: one for customers and one
 for taxi drivers.
\end_layout

\begin_layout Paragraph
Customer Frontend
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Customer Frontend
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to ServiceCommunicator: needed for dialogate with the core of
 the system
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
AcceptRefuseConfirmation
\series default
\emph default
: handles offers of prestations when there are no available taxis in the
 zone.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
PrestationSubmission
\series default
\emph default
: handles request of generic prestations made by customers (for example
 request or reservations)
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component must interface the customer with the system.
 A customer can submit generic requests using the 
\emph on
PrestationSubmission
\emph default
 interface.
 The 
\emph on
AcceptRefuseConfirmation
\emph default
 is used from customer for accepting or reject the offers of generic prestation
 proposed by the system if there aren't available taxis in the zone where
 the customer is.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/clientFrontendCustomerGen.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
Customer Frontend contains the two submodules described below.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Prestation Handler
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to ServiceCommunicator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
PrestationCustomerInterface
\series default
\emph default
: Interface which purpose is dialogate with the user and informing him about
 the prestation that he submits to the sytem.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The duty of PrestationHandler is to present generic requests made by the
 customer using the ServiceCommunicator.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/PrestationHandler.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Confirmation Handler
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to ServiceCommunicator for informing the system about the confirmation
 or rejection made by the customer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
ConfirmationCustomerInterface
\series default
\emph default
: Interface that presents data to customer and takes his input of accepting
 or rejecting an offer out of the zone.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
He links the system with the customer using the ServiceCommunicator in terms
 of offers out of the zone proposed by the system.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/ConfirmationHandler.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
Using the 2 components listed above the Customer Frontend is structured
 as indicate in the diagram below.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/clientFrontendCustomer.png
	width 10cm

\end_inset


\end_layout

\begin_layout Paragraph
Taxi Frontend
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Taxi Frontend
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to ServiceCommunicator for dialogates with the system.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
AcceptRefusePrestation: 
\series default
\emph default
interface provided for accept or reject ride offers proposed by the system.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
Authentication
\series default
\emph default
: needed for authenticate taxi drivers.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
AppearAvailable
\series default
\emph default
: drivers can use this interface for inform the system if he's available
 or not.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component should present all the functionalities of the system that
 taxi driver can exploit to them.
 See RASD document for deeper details.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/clientFrontendTaxiGen.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
Taxi Frontend is composed by the following 3 modules.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Available
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to ServiceCommunicator for informing the system of the availability
 of the taxi driver.
\end_layout

\begin_layout Enumerate
Interface to Authenticator for verifying identity of taxi driver.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
AvailableTaxiInterface: 
\series default
\emph default
interface used by taxi driver for setting their status to available or not.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
It manage the availability of a taxi.
 Using this component taxi drivers can set their status to available or
 unavailable.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/Available.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Authentication Engine
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to ServiceCommunicator for validate authentication.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
AuthComponentInterface: 
\series default
\emph default
interface used for other components for verifying taxi driver if needed.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
AuthTaxiInterface
\series default
\emph default
: Used by taxi driver for logging into the system.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component has the duty of authenticate taxi driver in the context of
 the system.
 It also provides an interface to frontend modules for guaranteeing informatics
 security.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/authenticationEngine.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Ride Handler
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to ServiceCommunicator for informing the system about the driver
 response about a generic request.
\end_layout

\begin_layout Enumerate
Interface to Authenticator for verifying identity of the taxi driver.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
RideTaxiInterface: 
\series default
\emph default
used by driver for accept or reject ride offers proposed by the system.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Using this component drivers can accept or refuse generic ride offers proposed
 by the system.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/rideHandler.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
Assembling the subcomponents described we can observe the structure of Taxi
 Frontend.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/clientFrontendTaxi.png
	width 12cm

\end_inset


\end_layout

\begin_layout Subsubsection
ServiceComunicator
\end_layout

\begin_layout Standard
The ServiceCommunicator component has the task to link the Frontend to the
 Core component, by means of services that the service provider makes available
 to the service requestor.
 The service register contains all the services that are needed to the system
 to run properly.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Communicator
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to Core
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
CustomerCommunicatorInterface: 
\series default
\emph default
interface used by customers for exploiting Service Communicator functionalities.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
TaxiCommunicatorInterface:
\series default
\emph default
 interface used by taxi drivers for exploiting Service Communicator functionalit
ies.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Communicator has the duty of connecting Frontend and core using
 SOA.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/ServiceCompGen.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
As said in the previous description a Service Oriented Architecture has
 been used for develop Service Communicator module.
 Now will be discussed the composition and the sub-components of the inquiring
 module.
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Register
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
none
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
RegisterRequestorInterface: 
\series default
\emph default
interface used by the service requestor to know the services it can access
 and use.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
ProviderInterface: 
\series default
\emph default
interface used by the service provider to know the service that can be accessed
 by the service requestor.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component contains all the services available that can be accessed
 by the requestor, if made available by the provider.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/ServiceRegister.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Requestor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to Service Register to know which services are available to the
 requestor.
\end_layout

\begin_layout Enumerate
Interface to Service Provider to access the available services.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
CustomerCommunicatorInterface: 
\series default
\emph default
interface used by the Customer Frontend to access the services available
 to the customer.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
TaxiCommunicatorInterface: 
\series default
\emph default
interface used by the Taxi Frontend to access the services available to
 the taxi driver.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component is used by the Customer Frontend and the Taxi Frontend components
 to access all the available services they need no guarantee the frontend
 functionalities.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/ServiceRequestor.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Service Provider
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to Core that is used to communicate to the core when a customer
 asks for a prestation and to know when to send a message to a customer
 or to a taxi driver.
\end_layout

\begin_layout Enumerate
Interface to Service Register to access the services stored in the service
 register.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
RequestorInterface: 
\series default
\emph default
interface used by the service requestor to access the services available
 to it.

\series bold
\emph on
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component allow the service requestor to access all the services it
 is able to access.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/ServiceProvider.png
	width 5cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
Assembling the listed components we obtain the following diagram that reperesent
 the composite structure of the Service Communicator.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/serviceComp.png
	width 10cm

\end_inset


\end_layout

\begin_layout Subsubsection
Core
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Core
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to Database, that make possible to access every information in
 the database such as the zones of the city and the taxis.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
CoreInterface: 
\series default
\emph default
interface used to communicate with the ServiceProvider and to manage services
 according to the core functions.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component has the task to execute all the main functionalities of the
 system, such as the queue management, sending message to customers and
 taxi drivers, etc.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/serverCoreComponentGen.png
	width 7cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CoreFacade
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to PrestationInput to make possible to external components to
 input a prestation.
\end_layout

\begin_layout Enumerate
Interface to TaxiManager to make possible to modify the current information
 about a taxi.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
CoreFacadeInterface: 
\series default
\emph default
interface used to make external components access the facade of the core,
 allowing a simpler access to the many functionalities of the system.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component is used to guarantee an easy access to the core functionalities.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/coreFacadeComponent.png
	width 7cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
QueueManager
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to PrestationInput that is needed by this component to know when
 a prestation is sent by a customer.
\end_layout

\begin_layout Enumerate
Interface to TaxiManager to retrieve information about taxis, such as their
 availability.
\end_layout

\begin_layout Enumerate
Interface to accessDatabase to retrieve information useful to manage the
 queues.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component manages the taxi queue of every zone of the city and says
 to other components when to send a message to a customer.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/QueueManagerComp.png
	width 9cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PrestationInput
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to accessDatabase, needed to retrieve information about taxis
 and prestations.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
actionInputPrest: 
\series default
\emph default
used to take in input any prestation sent by a customer.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
QueueManagerInterface: 
\series default
\emph default
used to communicate to the QueueManager component when a prestation is sent
 by a customer.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component manages the input of any prestation sent by a customer and
 the sending of messages to both customers and taxi drivers.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/PrestationInputComp.png
	width 7cm

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TaxiManager
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate
Interface to accessDatabase, needed to retrieve information about taxis.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
TaxiManagerInterface: 
\series default
\emph default
used to communicate to the QueueManager the status of a taxi.
\end_layout

\begin_layout Enumerate

\series bold
\emph on
manageTaxi: 
\series default
\emph default
used to take in input an update of the status of a taxi or the credentials
 used to log into the system.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component manages the status of every taxi and allow taxi drivers to
 log into the system.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/taxiManager.png
	width 9cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
\align left
Assembling all the core components previously described the complete Core
 component is obtained.
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/serverCore.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsubsection
Database
\end_layout

\begin_layout Standard
\align center
\begin_inset Tabular
<lyxtabular version="3" rows="4" columns="2">
<features rotate="0" tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="left" valignment="top" width="10cm">
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Database
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Required interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
None.
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Provided interfaces
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Enumerate

\series bold
\emph on
DatabaseInterface: 
\series default
\emph default
this interface allow the core and the database to communicate, so the core
 can access all the required information to guarantee its functionalities.

\series bold
\emph on
 
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
<cell alignment="left" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
This component contains all the data needed by the core, such as the zone
 of the city and all the taxis available.
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/databaseComp.png
	width 5cm

\end_inset


\end_layout

\begin_layout Subsection
Deployment view
\end_layout

\begin_layout Standard
In the first proposed diagram is proposed to the reader the interactions
 between several components distributed of physical devices.
 We can easily observe that the component Service Communicator is distributed
 in three different devices: client, web server and logic server.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/deployment/deployment.png
	width 15cm
	height 20cm
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Standard
\noindent
Considering that a client-server architecture has been chosen to implement
 the system, there are four elements in which the components have to be
 installed.
\end_layout

\begin_layout Standard
In the second view the linkage between several devices has been emphasized.
 DB-driver will depend on language and DB implementation.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/deployment/deplAlt.png
	width 15cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
A 
\begin_inset Quotes eld
\end_inset


\emph on
full-hardware
\emph default

\begin_inset Quotes erd
\end_inset

 view is now proposed for proposing to the reader a complete overview of
 the deployment structure.
 We can easily note a 2-tier client server architecture.
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/deployment/deplHw.png
	width 12cm

\end_inset


\end_layout

\begin_layout Subsubsection
Customer Client
\end_layout

\begin_layout Standard
This client contains the Customer Frontend component, so a user is able
 to submit a prestation (request or reservation) and to decide to accept
 or refuse a refusable message (this message is sent to the customer when
 the first taxi driver available is found outside the customer's zone).
 The customer's client is used on customer's smartphone or pcs, depending
 on his choice to use the app or webapp version of the service.
\end_layout

\begin_layout Subsubsection
Taxi Client
\end_layout

\begin_layout Standard
This client contains the Taxi Frontend component and is used by the taxi
 driver to access every functionality that is available to him, such as
 accepting or refusing a request and appear available to the system.
 This client will be installed on the taxi driver's smartphone and it's
 important to focus on the fact that this version of the client will be
 only available on taxi drivers' smartphone, in this way customers cannot
 accept the services reserved to drivers.
\end_layout

\begin_layout Standard
\noindent
The two clients exchange data, by means of interfaces, with both the service
 register (that allows them to retrieve the services they have access to)
 and the service provider (that provides the two client with the services
 they are able to access, previously specified by the service register).
\end_layout

\begin_layout Subsubsection
Logic Server
\end_layout

\begin_layout Standard
The server contains two components: the core (responsible for the execution
 of the main functionalities of the system) and the service provider (that
 allows clients to access the services they need).
 The service provider communicates with the service register to access the
 services that the clients are enabled to use.
\end_layout

\begin_layout Subsubsection
Web Server
\end_layout

\begin_layout Standard
The service register is located on a web page, so both the clients and the
 server can access it at any time and know which services can be used.
\end_layout

\begin_layout Subsection
Runtime view
\end_layout

\begin_layout Subsubsection
Request for a prestation
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/runtime/reqbpmn.png
	width 20cm
	height 15cm
	scaleBeforeRotation
	rotateAngle -90

\end_inset


\end_layout

\begin_layout Subsubsection
Core Prestation Handling
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/runtime/handlePrestation.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsubsection
Queue Algorithm
\end_layout

\begin_layout Standard
\align left
\begin_inset Graphics
	filename uml/runtime/algo.png
	width 22cm
	height 5cm
	scaleBeforeRotation
	rotateAngle -90

\end_inset


\end_layout

\begin_layout Subsubsection
Contact selected taxi
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/runtime/contactTaxi.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsubsection
Check if taxi is valid for a prestation
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/runtime/checkTaxi.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsubsection
Send Taxi out of the zone offer
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/runtime/informcustomer.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsubsection
Taxi driver authentication
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/runtime/bpmnTaxiLogin.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsubsection
Taxi available operation
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/runtime/bpmnTaxiAvailable.png
	width 15cm

\end_inset


\end_layout

\begin_layout Subsubsection
Service list retrievement
\end_layout

\begin_layout Standard
\begin_inset Graphics
	filename uml/runtime/serviceRegistry.png
	width 15cm
	height 10cm
	keepAspectRatio

\end_inset


\end_layout

\begin_layout Subsection
Component interfaces
\end_layout

\begin_layout Subsubsection
CustomerInterface
\end_layout

\begin_layout Enumerate

\family typewriter
void(AbstractPrestation pre)
\family default
: sending the passed prestation to Core using ServiceCommunicator.
\end_layout

\begin_layout Enumerate

\family typewriter
void notify(Message msg)
\family default
: notify something to Customer Frontend using the passed msg.
\end_layout

\begin_layout Enumerate

\family typewriter
void (DecoratedAbstractPrestation pre, CustomerResponse resp)
\family default
: notify Core about his decision on pre with resp.
 this method is used for accepting or refusing a prestation when a taxi
 is contacted out of the zone of the customer.
 DecoratedAbstracPrestation contains infos about the inquiring prestation
 plus infos about taxi (id of taxi, ETA).
\end_layout

\begin_layout Subsubsection
TaxiInterface
\end_layout

\begin_layout Enumerate

\family typewriter
void sendTaxiResponse(Taxi taxi,AbstractPrestation pre, TaxiResponse resp):
 
\family default
notify Core about his decision on pre with resp.
\end_layout

\begin_layout Enumerate

\family typewriter
void login(Taxi taxi,string id, string hashPsw)
\family default
: log in the taxi driver into the system using the passed id and the hash
 of the password inserted by the driver.
\end_layout

\begin_layout Enumerate

\family typewriter
void setAvailable(Taxi taxi, bool available)
\family default
: set the status of the inquiring taxi available or not as imposed as passed
 available variable imposes.
\end_layout

\begin_layout Enumerate

\family typewriter
void notify(Message msg)
\family default
: notify something to Taxi Frontend using the passed msg.
\end_layout

\begin_layout Subsubsection
RegisterRequestorInterface
\end_layout

\begin_layout Enumerate

\family typewriter
ServiceRegistry retrieveServiceRegistry(User user)
\family default
: retrieve a ServiceRegistry.
 the object returned will depend on the type of user that makes the request.
 A customer's service registry will be different than a taxi driver's one
 becuase they can access to different services.
\end_layout

\begin_layout Subsubsection
ProviderInterface
\end_layout

\begin_layout Enumerate

\family typewriter
void updateServiceRegistry(GlobalServiceRegistry newRegistry)
\family default
: replace the current serviceRegistry instance the the new passed one.
\end_layout

\begin_layout Subsubsection
CoreInterface
\end_layout

\begin_layout Enumerate

\family typewriter
changeTaxiStatus(Taxi taxi, bool available)
\family default
: ask Core to change the status of the inquiring taxi as available variable
 imposes.
\end_layout

\begin_layout Enumerate

\family typewriter
login(Taxi taxi,string id, string hashPsw)
\family default
: validate login in the Core of the passed taxi with the passed id and hashPsw.
\end_layout

\begin_layout Enumerate

\family typewriter
notifyUser(User user, Message msg)
\family default
: notify a generic user with msg.
\end_layout

\begin_layout Enumerate

\family typewriter
contactTaxi(Taxi taxi, AbstractPrestation pre)
\family default
: contact taxi asking him if he wants to accept pre and wait for his response.
\end_layout

\begin_layout Enumerate

\family typewriter
forwardPrestationToCore(AbstractPrestation pre)
\family default
: send pre to Core with the purpose of handling it.
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns
\end_layout

\begin_layout Subsubsection
Architectural styles
\end_layout

\begin_layout Standard
To implement the mytaxi system, we decided to use two architectural styles
 that are the most suitable for this system: the client-server architecture
 and the service oriented architecture (SOA).
\end_layout

\begin_layout Itemize

\series bold
Client-server architecture: 
\series default
we decided to use this style to implement our system, customers and taxi
 drivers are the clients that are able to connect to a server that can execute
 the main functionalities of the service, such as the taxi queue menagement.
 This is the simplest and at the same time the safest choice because other
 styles may have not worked as well as the client-server architecture.
 For example, a peer to peer architecture wouldn't be right for our system,
 because the absence of peers in a certain moment would have compromised
 the functionalities of the mytaxi system.
 Another architecture we thought of was to install some stations in the
 city at which the clients could connect and then each station could guarantee
 the communication between clients and the server.
 We decided not to choose this architecture because a malfunction in a single
 station would have interrupt the functionalities of the system for some
 clients and this solution could be quite expensive.
\end_layout

\begin_layout Itemize

\series bold
Service oriented architecture: 
\series default
our system is based on a service oriented architecture, this means that
 clients use the services provided by a service provider.
 In this way, the two type of clients (customer and taxi driver) can access
 only the services they are able to use (for example, customers can access
 the service to make request and reservation, but not the one to accept
 a request that can only be used by taxi drivers).
 Furthermore, in this way the system is extendible, because if some new
 functionality must be added to the system, it's enough to just add the
 corrisponding service.
 The services provided by our system can also be sold to a third part system
 if it needs them.
\end_layout

\begin_layout Itemize

\series bold
Message based point to point: 
\series default
this architectural style is used to make possible the communication between
 the service requestor of the customer's frontend and the service provider.
 In fact, the customer's frontend sends a message only to the core, that
 has the task to process the user's request and answer him if it finds an
 available taxi.
\end_layout

\begin_layout Subsubsection
Design patterns
\end_layout

\begin_layout Itemize

\series bold
Core facade: 
\series default
the core of our system communicates with the service provider by means of
 a component, that is the Core facade.
 In this way the access made by the service provider to the core is much
 simpler and all the algorithms and functionalities of the core are hidden
 and unaccessible from the outside.
\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Subsection
Queue management algorithm
\end_layout

\begin_layout Standard
\begin_inset listings
lstparams "language=C,breaklines=true"
inline false
status open

\begin_layout Plain Layout

PROC QueueManagement(AbstractPrestation pre)
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	Request req = pre
\end_layout

\begin_layout Plain Layout

	Queue<Taxi> taxiQueue = getZoneQueueOfRequest(req)
\end_layout

\begin_layout Plain Layout

	Buffer buffer
\end_layout

\begin_layout Plain Layout

	Bool taxiFound = false
\end_layout

\begin_layout Plain Layout

	Taxi taxi
\end_layout

\begin_layout Plain Layout

	Response resp
\end_layout

\begin_layout Plain Layout

	OfferResponse offResp
\end_layout

\begin_layout Plain Layout

	WHILE(taxiQueue.length != 0)
\end_layout

\begin_layout Plain Layout

		taxi = taxiQueue.pop()
\end_layout

\begin_layout Plain Layout

		resp = contactTaxi(taxi, req)
\end_layout

\begin_layout Plain Layout

		IF(resp == Response.REFUSE)
\end_layout

\begin_layout Plain Layout

		THEN
\end_layout

\begin_layout Plain Layout

			moveTaxiToBuffer(taxi)
\end_layout

\begin_layout Plain Layout

		ELSE
\end_layout

\begin_layout Plain Layout

			restoreQueue(queue, buffer)
\end_layout

\begin_layout Plain Layout

			sendConfirmationMessage()
\end_layout

\begin_layout Plain Layout

			taxiFound = true
\end_layout

\begin_layout Plain Layout

		ENDIF
\end_layout

\begin_layout Plain Layout

	ENDWHILE
\end_layout

\begin_layout Plain Layout

	IF(!taxiFound)
\end_layout

\begin_layout Plain Layout

	THEN
\end_layout

\begin_layout Plain Layout

		FOR i FROM 1 TO 3
\end_layout

\begin_layout Plain Layout

			taxi = geti-thNearestTaxiInAnotherZone(i)
\end_layout

\begin_layout Plain Layout

			IF (pre.type == reservation & taxi.timeDistanceFromPoint(pre.startPoint)
 > minutes(10) )
\end_layout

\begin_layout Plain Layout

				break //all taxis are further than 10 minutes
\end_layout

\begin_layout Plain Layout

			ENDIF
\end_layout

\begin_layout Plain Layout

			resp = contactTaxi(taxi, pre)
\end_layout

\begin_layout Plain Layout

			IF(resp == Response.ACCEPT)
\end_layout

\begin_layout Plain Layout

				offResp = sendPrestationOffer(taxi, ETA)
\end_layout

\begin_layout Plain Layout

				sendOfferResponseOfUser(taxi)
\end_layout

\begin_layout Plain Layout

				IF(offerResp == OfferResponse.ACCEPT)
\end_layout

\begin_layout Plain Layout

					taxi = storeAbstractPrestation(pre)
\end_layout

\begin_layout Plain Layout

					taxiFound = true
\end_layout

\begin_layout Plain Layout

				ENDIF
\end_layout

\begin_layout Plain Layout

			ENDIF
\end_layout

\begin_layout Plain Layout

		ENDFOR
\end_layout

\begin_layout Plain Layout

	ENDIF
\end_layout

\begin_layout Plain Layout

	IF(!taxiFound)
\end_layout

\begin_layout Plain Layout

	THEN
\end_layout

\begin_layout Plain Layout

		sendTaxiNotFoundMessage()
\end_layout

\begin_layout Plain Layout

	ENDIF
\end_layout

\begin_layout Plain Layout

END
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Here follows a brief explanation of the main functionalities of the functions
 used in this piece of code:
\end_layout

\begin_layout Itemize

\series bold
getZoneQueueOfRequest(req)
\series default
: this function takes as input the request sent by the customer and returns
 the queue of all the taxis that are currently in the zone of the customer.
\end_layout

\begin_layout Itemize

\series bold
taxiQueue.pop()
\series default
: this function extracts the first taxi from the queue previously found
 and returns it.
\end_layout

\begin_layout Itemize

\series bold
contactTaxi(taxi, req)
\series default
: this function takes as input the taxi extracted from the queue and the
 request sent by the customer.
 It sends a message to the taxi driver who is driving the taxi extracted
 from the queue and returns the respons sent from the taxi driver.
\end_layout

\begin_layout Itemize

\series bold
moveTaxiToBuffer(taxi)
\series default
: if the taxi driver refuses the customer's request, his taxi (which is
 taken as input) is temporarly moved to a buffer, waiting to be inserted
 in the queue again in the new position.
\end_layout

\begin_layout Itemize

\series bold
restoreQueue(queue, buffer)
\series default
: this function takes as input the queue of taxis and the buffer that contains
 the taxis that have refused the request sent by the customer.
 When a taxi driver accepts the request, the queue of the chosen zone is
 rebuilt, adding to the queue the taxis that have previously refused the
 request (located in the buffer).
 In this way at the end of the execution of this function, the queue has
 first the taxis that have not been sent the request (if any) and then the
 taxis that have refused the request following the order of their refusal.
\end_layout

\begin_layout Itemize

\series bold
sendConfirmationMessage()
\series default
: this function sends a confirmation message to the customer with the code
 of the taxi that accepted his request.
\end_layout

\begin_layout Itemize

\series bold
geti-thNearestTaxiInAnotherZone(i)
\series default
: if the system doesn't find any available taxi in the customer's zone,
 it finds the nearest taxi located in a different zone.
 This procedure is repeated up to three times.
\end_layout

\begin_layout Itemize

\series bold
sendPrestationOffer(taxi, ETA)
\series default
: if the system finds an available taxi outside the customer's zone, it
 sends a message to the customer with the code of the taxi and the estimated
 time of its arrival.
 This function then returns the response of the user (who can accept or
 refuse the prestation).
\end_layout

\begin_layout Itemize

\series bold
sendOfferResponseOfUser(taxi)
\series default
: this function takes as input the taxi that must be notified with the decision
 of the customer to accept or refuse the ride.
\end_layout

\begin_layout Itemize

\series bold
storeAbstractPrestation(pre)
\series default
: this function takes as input the prestation that will be made by the taxi
 that the function returns.
\end_layout

\begin_layout Itemize

\series bold
sendTaxiNotFoundMessage()
\series default
: if any taxi isn't found to take the customer to his destination, either
 in the customer zone nor in another zone, a message is sent to the customer
 saying that there isn't any available taxi at the moment.
\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Section
References
\end_layout

\begin_layout Subsection
Used software
\end_layout

\begin_layout Standard
For the production of this document the sofware elencated below has been
 used:
\end_layout

\begin_layout Itemize
Document production and layout: LyX 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

www.lyx.org
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
UML diagrams (component, sequence): UMLet 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

www.umlet.com
\end_layout

\end_inset


\end_layout

\begin_layout Itemize
BPMN: Draw.io 
\begin_inset Flex URL
status open

\begin_layout Plain Layout

www.draw.io
\end_layout

\end_inset


\end_layout

\end_body
\end_document
