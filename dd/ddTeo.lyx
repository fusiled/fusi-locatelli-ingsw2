#LyX 2.1 created this file. For more info see http://www.lyx.org/
\lyxformat 474
\begin_document
\begin_header
\textclass article
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman default
\font_sans default
\font_typewriter default
\font_math auto
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Quote
\noindent
\align center

\size giant
mytaxy
\end_layout

\begin_layout Quote
\noindent
\align center

\size larger
Document Design
\end_layout

\begin_layout Quote
\noindent
\align center
Matteo Maria Fusi, Matteo Locatelli
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Document version
\end_layout

\begin_layout Standard
Current version is 1.0 .
\end_layout

\begin_layout Subsection
Time Spent
\end_layout

\begin_layout Standard
5h
\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Standard
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Document Overview
\end_layout

\begin_layout Subsection
Document Purpose
\end_layout

\begin_layout Subsection
Definitions, Acronyms, Abbreviations
\end_layout

\begin_layout Subsection
Reference Documents
\end_layout

\begin_layout Subsection
Document Structure 
\end_layout

\begin_layout Section
Architectural Design
\end_layout

\begin_layout Subsection
Overview (L)
\end_layout

\begin_layout Standard
The architecture we based our system on is the client-server architecture
 with two tiers.
 One tier (the server tier) is composed by the server logic and the database,
 the other tier (the client tier) is composed by the client logic and the
 GUI that allows the user to intract with the system.
 The fact that both the server and the client tiers have an aplication logic
 means that the application is distributed; this, added to the fact that
 we decided to use a service oriented architure, allows our system to be
 scalable, so other services can be added without modifying the structure
 of the system.
 For example, if a future implementation of the system needs a different
 type of client, the new client can use the same services provided by the
 server without modifying the implementation of its logic.
 Furthermore, using a two tier architecture allows our system to be easy
 to maintain and to repair if some of its components break.
\end_layout

\begin_layout Subsection
High level components and their interaction
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/HIghComp.png
	width 10cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
The three main high level components of the system are the front end, the
 service comunicator and the core of the system.
 The front end is used to allow customers and taxi drivers to interact with
 the system, so every customer can make requests and reservations and every
 taxi driver can accept or refuse a ride, appear available or not to the
 system etc.
 The core has the task to manage taxi queues and manage the comunication
 between customers and taxi drivers, by means of messages.
 Finally, the service comunicator has to ensure the comunication between
 the front end and the core, providing services to both the components.
\end_layout

\begin_layout Subsection
Component view 
\end_layout

\begin_layout Subsubsection
Frontend
\end_layout

\begin_layout Standard
\noindent
The frontend must takes the input of users and present the several responses
 that the system generates for the user.
 Two different kinds of frontends are proposed: one for customers and one
 for taxi drivers.
\end_layout

\begin_layout Paragraph
Customer Frontend
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/clientFrontendCustomer.png
	width 10cm

\end_inset


\end_layout

\begin_layout Paragraph
Taxi Frontend
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/clientFrontendTaxi.png
	width 10cm

\end_inset


\end_layout

\begin_layout Subsubsection
ServiceComunicator
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/serviceComp.png
	width 12cm

\end_inset


\end_layout

\begin_layout Subsubsection
Core
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/component/serverCore.png
	width 12cm

\end_inset


\end_layout

\begin_layout Subsection
Deployment view (L)
\end_layout

\begin_layout Standard
\align center
\begin_inset Graphics
	filename uml/deployment/deployment.png
	width 15cm

\end_inset


\end_layout

\begin_layout Standard
\noindent
Considering that a client-server architecture has been chosen to implement
 the system, there are four elements in which the components have to be
 installed.
\end_layout

\begin_layout Subsubsection
Customer Client
\end_layout

\begin_layout Standard
This client contains the Customer Frontend component, so a user is able
 to submit a prestation (request or reservation) and to decide to accept
 or refuse a refusable message (this message is sent to the customer when
 the first taxi driver available is found outside the customer's zone).
 The customer's client is used on customer's smartphone or pcs, depending
 on his choice to use the app or webapp version of the service.
\end_layout

\begin_layout Subsubsection
Taxi Client
\end_layout

\begin_layout Standard
This client contains the Taxi Frontend component and is used by the taxi
 driver to access every functionality that is available to him, such as
 accepting or refusing a request and appear available to the system.
 This client will be installed on the taxi driver's smartphone and it's
 important to focus on the fact that this version of the client will be
 only available on taxi drivers' smartphone, in this way customers cannot
 accept the services reserved to drivers.
\end_layout

\begin_layout Standard
\noindent
The two clients exchange data, by means of interfaces, with both the service
 register (that allows them to retrieve the services they have access to)
 and the service provider (that provides the two client with the services
 they are able to access, previously specified by the service register).
\end_layout

\begin_layout Subsubsection
Server
\end_layout

\begin_layout Standard
The server contains two components: the core (responsible for the execution
 of the main functionalities of the system) and the service provider (that
 allows clients to access the services they need).
 The service provider communicates with the service register to access the
 services that the clients are enabled to use.
\end_layout

\begin_layout Subsubsection
Web page
\end_layout

\begin_layout Standard
The service register is located on a web page, so both the clients and the
 server can access it at any time and know which services can be used.
\end_layout

\begin_layout Subsection
Runtime view (F)
\end_layout

\begin_layout Standard
SEQUENCE DIAGRAM con pi√π dettagli rispetto a quelli nel rasd, soprattutto
 riguardo alle interazioni con le interfacce e i servizi.
\end_layout

\begin_layout Subsection
Component interfaces (F)
\end_layout

\begin_layout Standard
Spiegare come funzionano i servizi delle interfacce di client e server (in
 generale dato che vengono descritti nello specifico nei sequence diagrams).
\end_layout

\begin_layout Subsection
Selected architectural styles and patterns (L)
\end_layout

\begin_layout Subsubsection
Architectural styles
\end_layout

\begin_layout Standard
To implement the mytaxi system, we decided to use two architectural styles
 that are the most suitable for this system: the client-server architecture
 and the service oriented architecture (SOA).
\end_layout

\begin_layout Itemize

\series bold
Client-server architecture: 
\series default
we decided to use this style to implement our system, customers and taxi
 drivers are the clients that are able to connect to a server that can execute
 the main functionalities of the service, such as the taxi queue menagement.
 This is the simplest and at the same time the safest choice because other
 styles may have not worked as well as the client-server architecture.
 For example, a peer to peer architecture wouldn't be right for our system,
 because the absence of peers in a certain moment would have compromised
 the functionalities of the mytaxi system.
 Another architecture we thought of was to install some stations in the
 city at which the clients could connect and then each station could guarantee
 the communication between clients and the server.
 We decided not to choose this architecture because a malfunction in a single
 station would have interrupt the functionalities of the system for some
 clients and this solution could be quite expensive.
\end_layout

\begin_layout Itemize

\series bold
Service oriented architecture: 
\series default
our system is based on a service oriented architecture, this means that
 clients use the services provided by a service provider.
 In this way, the two type of clients (customer and taxi driver) can access
 only the services they are able to use (for example, customers can access
 the service to make request and reservation, but not the one to accept
 a request that can only be used by taxi drivers).
 Furthermore, in this way the system is extendible, because if some new
 functionality must be added to the system, it's enough to just add the
 corrisponding service.
 The services provided by our system can also be sold to a third part system
 if it needs them.
\end_layout

\begin_layout Subsubsection
Design patterns
\end_layout

\begin_layout Itemize

\series bold
Core facade: 
\series default
the core of our system communicates with the service provider by means of
 a component, that is the Core facade.
 In this way the access made by the service provider to the core is much
 simpler and all the algorithms and functionalities of the core are hidden
 and unaccessible from the outside.
\end_layout

\begin_layout Subsection
Other design decisions
\end_layout

\begin_layout Standard
TUA MAMMA
\end_layout

\begin_layout Section
Algorithm Design
\end_layout

\begin_layout Standard
\begin_inset listings
inline false
status open

\begin_layout Plain Layout

PROC QueueManagement(AbstractPrestation pre)
\end_layout

\begin_layout Plain Layout

BEGIN
\end_layout

\begin_layout Plain Layout

	Request req = pre
\end_layout

\begin_layout Plain Layout

	Queue<Taxi> taxiQueue = getZoneQueueOfRequest(req)
\end_layout

\begin_layout Plain Layout

	Buffer buffer
\end_layout

\begin_layout Plain Layout

	Bool taxiFound = false
\end_layout

\begin_layout Plain Layout

	Taxi taxi
\end_layout

\begin_layout Plain Layout

	Response resp
\end_layout

\begin_layout Plain Layout

	OfferResponse offResp
\end_layout

\begin_layout Plain Layout

	WHILE(taxiQueue.length != 0)
\end_layout

\begin_layout Plain Layout

		taxi = taxiQueue.pop()
\end_layout

\begin_layout Plain Layout

		resp = contactTaxi(taxi, req)
\end_layout

\begin_layout Plain Layout

		IF(resp == Response.REFUSE)
\end_layout

\begin_layout Plain Layout

		THEN
\end_layout

\begin_layout Plain Layout

			moveTaxiToBuffer(taxi)
\end_layout

\begin_layout Plain Layout

		ELSE
\end_layout

\begin_layout Plain Layout

			restoreQueue(queue, buffer)
\end_layout

\begin_layout Plain Layout

			sendConfirmationMessage()
\end_layout

\begin_layout Plain Layout

			taxiFound = true
\end_layout

\begin_layout Plain Layout

		ENDIF
\end_layout

\begin_layout Plain Layout

	ENDWHILE
\end_layout

\begin_layout Plain Layout

	IF(!taxiFound)
\end_layout

\begin_layout Plain Layout

	THEN
\end_layout

\begin_layout Plain Layout

		FOR i FROM 1 TO 3
\end_layout

\begin_layout Plain Layout

			taxi = geti-thNearestTaxiInAnotherZone(i)
\end_layout

\begin_layout Plain Layout

			resp = contactTaxi(taxi, pre)
\end_layout

\begin_layout Plain Layout

			IF(resp == Response.ACCEPT)
\end_layout

\begin_layout Plain Layout

				offResp = sendPrestationOffer(taxi, ETA)
\end_layout

\begin_layout Plain Layout

				sendOfferResponseOfUser(taxi)
\end_layout

\begin_layout Plain Layout

				IF(offerResp == OfferResponse.ACCEPT)
\end_layout

\begin_layout Plain Layout

					taxi = storeAbstractPrestation(pre)
\end_layout

\begin_layout Plain Layout

					taxiFound = true
\end_layout

\begin_layout Plain Layout

				ENDIF
\end_layout

\begin_layout Plain Layout

			ENDIF
\end_layout

\begin_layout Plain Layout

		ENDFOR
\end_layout

\begin_layout Plain Layout

	ENDIF
\end_layout

\begin_layout Plain Layout

	IF(!taxiFound)
\end_layout

\begin_layout Plain Layout

	THEN
\end_layout

\begin_layout Plain Layout

		sendTaxiNotFoundMessage()
\end_layout

\begin_layout Plain Layout

	ENDIF
\end_layout

\begin_layout Plain Layout

END
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\noindent
Here follows a brief explanation of the main functionalities of the functions
 used in this piece of code:
\end_layout

\begin_layout Itemize

\series bold
getZoneQueueOfRequest(req)
\series default
: this function takes as input the request sent by the customer and returns
 the queue of all the taxis that are currently in the zone of the customer.
\end_layout

\begin_layout Itemize

\series bold
taxiQueue.pop()
\series default
: this function extracts the first taxi from the queue previously found
 and returns it.
\end_layout

\begin_layout Itemize

\series bold
contactTaxi(taxi, req)
\series default
: this function takes as input the taxi extracted from the queue and the
 request sent by the customer.
 It sends a message to the taxi driver who is driving the taxi extracted
 from the queue and returns the respons sent from the taxi driver.
\end_layout

\begin_layout Itemize

\series bold
moveTaxiToBuffer(taxi)
\series default
: if the taxi driver refuses the customer's request, his taxi (which is
 taken as input) is temporarly moved to a buffer, waiting to be inserted
 in the queue again in the new position.
\end_layout

\begin_layout Itemize

\series bold
restoreQueue(queue, buffer)
\series default
: this function takes as input the queue of taxis and the buffer that contains
 the taxis that have refused the request sent by the customer.
 When a taxi driver accepts the request, the queue of the chosen zone is
 rebuilt, adding to the queue the taxis that have previously refused the
 request (located in the buffer).
 In this way at the end of the execution of this function, the queue has
 first the taxis that have not been sent the request (if any) and then the
 taxis that have refused the request following the order of their refusal.
\end_layout

\begin_layout Itemize

\series bold
sendConfirmationMessage()
\series default
: this function sends a confirmation message to the customer with the code
 of the taxi that accepted his request.
\end_layout

\begin_layout Itemize

\series bold
geti-thNearestTaxiInAnotherZone(i)
\series default
: if the system doesn't find any available taxi in the customer's zone,
 it finds the nearest taxi located in a different zone.
 This procedure is repeated up to three times.
\end_layout

\begin_layout Itemize

\series bold
sendPrestationOffer(taxi, ETA)
\series default
: if the system finds an available taxi outside the customer's zone, it
 sends a message to the customer with the code of the taxi and the estimated
 time of its arrival.
 This function then returns the response of the user (who can accept or
 refuse the prestation).
\end_layout

\begin_layout Itemize

\series bold
sendOfferResponseOfUser(taxi)
\series default
: this function takes as input the taxi that must be notified with the decision
 of the customer to accept or refuse the ride.
\end_layout

\begin_layout Itemize

\series bold
storeAbstractPrestation(pre)
\series default
: this function takes as input the prestation that will be made by the taxi
 that the function returns.
\end_layout

\begin_layout Itemize

\series bold
sendTaxiNotFoundMessage()
\series default
: if any taxi isn't found to take the customer to his destination, either
 in the customer zone nor in another zone, a message is sent to the customer
 saying that there isn't any available taxi at the moment.
\end_layout

\begin_layout Section
Requirements Traceability
\end_layout

\begin_layout Section
References
\end_layout

\end_body
\end_document
